#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Aug 17, 2022 12:59:04 PM EDT  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

line_list = []

import filefixer_support
from tkinter.filedialog import askopenfilename, asksaveasfilename

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class topLevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1200x844+431+100")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Markraft Fixer Live v3")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        _style_code()
        self.OpenButton = ttk.Button(self.top)
        self.OpenButton.place(relx=0.171, rely=0.569, height=75, width=176)
        self.OpenButton.configure(takefocus="")
        self.OpenButton.configure(text='''Open File''')
        self.OpenButton.configure(compound='left')
        self.OpenButton.configure(command=lambda: myOpen(self))

        self.SaveButton = ttk.Button(self.top)
        self.SaveButton.place(relx=0.171, rely=0.758, height=75, width=176)
        self.SaveButton.configure(takefocus="")
        self.SaveButton.configure(text='''Save File''')
        self.SaveButton.configure(compound='left')
        self.SaveButton.configure(command=lambda : mySave(self))

        self.TLabel1 = ttk.Label(self.top)
        self.TLabel1.place(relx=0.047, rely=0.201, height=199, width=451)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(justify='center')
        self.TLabel1.configure(wraplength="400")
        self.TLabel1.configure(text='''Click open, select your txt file from 2020, then click save file. On the right will be the catalog, item, and price from 2020. This does not mean the price will be exactly this in Ufactory due to factors being applied at import.''')
        self.TLabel1.configure(compound='center')

        self.ItemList = ScrolledListBox(self.top)
        self.ItemList.place(relx=0.522, rely=0.071, relheight=0.858
                , relwidth=0.447)
        self.ItemList.configure(background="white")
        self.ItemList.configure(cursor="xterm")
        self.ItemList.configure(disabledforeground="#a3a3a3")
        self.ItemList.configure(font="TkFixedFont")
        self.ItemList.configure(foreground="black")
        self.ItemList.configure(highlightbackground="#d9d9d9")
        self.ItemList.configure(highlightcolor="#d9d9d9")
        self.ItemList.configure(selectbackground="#c4c4c4")
        self.ItemList.configure(selectforeground="black")

        self.StatusLabel = tk.Label(self.top)
        self.StatusLabel.place(relx=0.199, rely=0.699, height=21, width=104)
        self.StatusLabel.configure(activebackground="#f9f9f9")
        self.StatusLabel.configure(anchor='w')
        self.StatusLabel.configure(background="#d9d9d9")
        self.StatusLabel.configure(compound='left')
        self.StatusLabel.configure(disabledforeground="#a3a3a3")
        self.StatusLabel.configure(foreground="#000000")
        self.StatusLabel.configure(highlightbackground="#d9d9d9")
        self.StatusLabel.configure(highlightcolor="black")
        self.StatusLabel.configure(text='''No txt file selected''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


def myOpen(self):
    supplier = ''
    # lineRange123 = 0
    filename = askopenfilename()  # show an "Open" dialog box and return the path to the selected file

    file = open(filename, "r")
    global line_list
    line_list = file.readlines()
    for x in range(2):
        for i in range(len(line_list)):

            line_len = len(line_list[i].split(','))

            parameters = line_list[i].split(',')
            ##            if line_len == 3:
            ##
            ##                print(str(line_len) + ' - ' + line_list[i] + ' - ' + str(parameters[1].isnumeric()))
            ##            else:
            ##                print(str(line_len) + ' - ' + line_list[i])

            if "Net total:" not in line_list[i] or "net total" not in line_list[i] or "subtotal" not in line_list[i]:
                try:
                    if parameters[2] == "8000000" and line_len != 6:
                        line_list[i] = parameters[0] + ',' + parameters[1] + ',' + parameters[2] + ',' + parameters[
                            3] + ',' + parameters[3] + ',' + parameters[4]

                    if parameters[2] == "8000000" and parameters[4] == '-' and line_len == 6:
                        line_list[i] = parameters[0] + ',' + parameters[1] + ',' + parameters[2] + ',' + parameters[
                            3] + ',' + parameters[3] + ',' + parameters[5]
                except:
                    pass
                    # print("No processing needed for line " + str(i))

                try:

                    if line_len == 7:
                        if parameters[5].isnumeric() == True:
                            line_list[i] = parameters[0] + ',' + parameters[1] + ',' + parameters[2] + ',' + parameters[
                                3] + ',' + parameters[4] + ',' + parameters[5] + '' + parameters[6]
                        else:
                            line_list[i] = parameters[0] + ',' + parameters[1] + ',' + parameters[2] + ',' + parameters[
                                3] + ',' + parameters[4] + ' ' + parameters[5] + ',' + parameters[6]
                except:
                    pass
                    # print("No processing needed for line " + str(i))

                try:
                    if line_len < 6:
                        line_list[i] = parameters[0] + ',' + parameters[1] + ',' + parameters[2] + ',-,' + parameters[
                            3] + ',' + parameters[4]
                except:
                    pass
                    # print("No processing needed for line " + str(i))

                try:
                    if line_len == 3 and parameters[1].isnumeric() == True:
                        line_list[i] = line_list[i].strip('\n') + ',-,-,0.00\n'


                except:
                    pass
                    # print("No processing needed for line " + str(i))
                try:
                    if 'CNS.BR.S{1,2,3}' in line_list[i]:
                        line_list[i] = line_list[i].replace('CNS.BR.S{1,2,3}', 'CNS.BR.S{1 2 3}')
                except:
                    pass
                try:
                    if 'FS1' in line_list[i]:
                        line_list[i] = line_list[i].replace('1", 2", & 3" Fillers', '1" Filler')
                    elif 'FS2' in line_list[i]:
                        line_list[i] = line_list[i].replace('1", 2", & 3" Fillers', '2" Filler')
                    elif 'FS3' in line_list[i]:
                        line_list[i] = line_list[i].replace('1", 2", & 3" Fillers', '3" Filler')

                except:
                    pass
                    # print("No processing needed for line " + str(i))

                if line_list[i] == "#,,<--- Selected Door Style --->\n":
                    line_list[i] = ",<--- Selected Door Style --->\n"
                if line_list[i] == "Qty,User code,Manuf. code,Description\n" or line_list[
                    i] == "Qty,User code,Manuf. \n":
                    line_list[i] = "#,Qty,User code,Manuf. code,Description\n"
                try:
                    if len(line_list[i].split(',')) == 6 and parameters[4].isnumeric() == True:
                        line_list[i] = parameters[0] + ',' + parameters[1] + ',' + parameters[2] + ',' + parameters[
                            2] + ',' + parameters[3] + ',' + parameters[4] + parameters[5]
                except:
                    pass
                    # print("No processing needed for line " + str(i))

    file.close()
    self.StatusLabel.config(text = "Txt file selected")
    return (line_list)

def mySave (self):
    filename2 = asksaveasfilename(defaultextension=".txt", filetypes=(("Text File", "*.txt"),("All Files", "*.*") ))
    file2 = open(filename2, "w")
    file2.writelines(line_list)
    line_len = len(line_list)

    catalog = ''
    list_index = 0
    for i in range(line_len):

        paramters =  line_list[i].split(',')
        if len(paramters) == 1 and 'CATALOG' in paramters[0]:
            catalog = paramters[0]
        if len(paramters) == 6 and "User" not in paramters[2] and "total" not in line_list[i] and "Total" not in line_list[i]:
            self.ItemList.insert(list_index, catalog + ' ' + paramters[4] + ' $' + paramters[5])
            list_index += 1
    file2.close()

def start_up():
    filefixer_support.main()

if __name__ == '__main__':
    filefixer_support.main()




